{"version":3,"sources":["actions/actionTypes.js","actions/changeDirections.js","reducers/buildingTypes.js","reducers/initialState.js","reducers/rootReducer.js","reducers/vpChips.js","reducers/buildings.js","components/HeaderLayout.js","components/ScoreDisplayLayout.js","components/ChipChangeButtonLayout.js","components/ChipChangeButtonContainer.js","actions/actionCreators.js","components/ScoringLayout.js","components/ScoringContainer.js","components/BuildingBonusInputLayout.js","components/BuildingBonusPanelLayout.js","components/BuildingLayout.js","components/BuildingColumnLayout.js","components/BuildingColumnContainer.js","components/BuildingGridLayout.js","App.js","registerServiceWorker.js","index.js","store/configureStore.js"],"names":["CHANGE_VP_CHIPS","TOGGLE_BUILDING_BUILT","TOGGLE_BUILDING_HAS_WORKER","SET_BONUS_INPUT","ADD","SUBTRACT","VIOLET","initialState","vpChips","buildings","name","type","points","isBuilt","hasWorker","bonusInput","inputId","value","labelText","inputPlaceholder","rootReducer","combineReducers","state","arguments","length","undefined","action","types","direction","directions","amount","newVpChips","map","building","buildingName","Object","assign","inputValue","HeaderLayout","react_default","a","createElement","className","ScoreDisplayLayout","_ref","titleText","isScoreLarge","scoreValue","Fragment","ChipChangeButtonLayout","buttonText","idValue","onButtonClick","Badge","onClick","href","id","ChipChangeButtonContainer","connect","ownProps","dispatch","propTypes","PropTypes","string","isRequired","number","ScoringLayout","buildingsScore","bonusScore","totalScore","Container","Row","Col","components_ScoreDisplayLayout","components_ChipChangeButtonContainer","xs","calculateBuildingBonus","buildingTypeCounts","countProductionLarge","PRODUCTION_LARGE","countProductionSmall","PRODUCTION_SMALL","countViolet","Math","floor","countByType","reduce","acc","cur","ScoringContainer","currBuildingsScore","currBonusScore","getBonusScore","currTotalScore","BuildingBonusInputLayout","onBonusInputChange","FormGroup","htmlFor","placeholder","onChange","e","parsedValue","parseInt","isNaN","sanitizeInputValue","target","stopPropagation","BuildingBonusPanelLayout","inputFormCode","onWorkerChange","components_BuildingBonusInputLayout","Form","inline","check","Label","Input","checked","BuildingLayout","bonusPanelCode","builtStatusStyle","components_BuildingBonusPanelLayout","concat","BuildingColumnLayout","buildingLevel","onBuildingClick","Card","CardHeader","components_BuildingLayout","key","BuildingColumnContainer","columnNumber","filter","b","toggleBuildingBuilt","toggleBuildingHasWorker","setBonusInput","BuildingSelector","column","components_BuildingColumnContainer","App","fluid","components_HeaderLayout","components_ScoringContainer","BuildingGridLayout","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.adce1825.chunk.js","sourcesContent":["export const CHANGE_VP_CHIPS = 'CHANGE_VP_CHIPS';\nexport const TOGGLE_BUILDING_BUILT = 'TOGGLE_BUILDING_BUILT';\nexport const TOGGLE_BUILDING_HAS_WORKER = 'TOGGLE_BUILDING_HAS_WORKER';\nexport const SET_BONUS_INPUT = 'SET_BONUS_INPUT';\n","export const ADD = 'ADD';\nexport const SUBTRACT = 'SUBTRACT';\n","export const PRODUCTION_SMALL = 'PRODUCTION_SMALL';\nexport const PRODUCTION_LARGE = 'PRODUCTION_LARGE';\nexport const VIOLET = 'VIOLET';\n","import { PRODUCTION_LARGE, PRODUCTION_SMALL, VIOLET } from \"./buildingTypes\"\n\nconst initialState = {\n  vpChips: 0,\n  buildings: [\n    {\n      name: \"Small Indigo Plant\",\n      type: PRODUCTION_SMALL,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Small Sugar Mill\",\n      type: PRODUCTION_SMALL,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Small Market\",\n      type: VIOLET,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Hacienda\",\n      type: VIOLET,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Construction Hut\",\n      type: VIOLET,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Small Warehouse\",\n      type: VIOLET,\n      points: 1,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Indigo Plant\",\n      type: PRODUCTION_LARGE,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Sugar Mill\",\n      type: PRODUCTION_LARGE,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Hospice\",\n      type: VIOLET,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Office\",\n      type: VIOLET,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Large Market\",\n      type: VIOLET,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Large Warehouse\",\n      type: VIOLET,\n      points: 2,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Tobacco Storage\",\n      type: PRODUCTION_LARGE,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Coffee Roaster\",\n      type: PRODUCTION_LARGE,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Factory\",\n      type: VIOLET,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"University\",\n      type: VIOLET,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Harbor\",\n      type: VIOLET,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Wharf\",\n      type: VIOLET,\n      points: 3,\n      isBuilt: false,\n      hasWorker: null,\n      bonusInput: null,\n    },\n    {\n      name: \"Guild Hall\",\n      type: VIOLET,\n      points: 4,\n      isBuilt: false,\n      hasWorker: false,\n      bonusInput: null,\n    },\n    {\n      name: \"Customs House\",\n      type: VIOLET,\n      points: 4,\n      isBuilt: false,\n      hasWorker: false,\n      bonusInput: null,\n    },\n    {\n      name: \"Residence\",\n      type: VIOLET,\n      points: 4,\n      isBuilt: false,\n      hasWorker: false,\n      bonusInput: {\n        inputId: \"islandSpaces\",\n        value: \"\",\n        labelText: \"Total occupied island spaces\",\n        inputPlaceholder: \"Island spaces\"\n      },\n    },\n    {\n      name: \"City Hall\",\n      type: VIOLET,\n      points: 4,\n      isBuilt: false,\n      hasWorker: false,\n      bonusInput: null,\n    },\n    {\n      name: \"Fortress\",\n      type: VIOLET,\n      points: 4,\n      isBuilt: false,\n      hasWorker: false,\n      bonusInput: {\n        inputId: \"totalWorkers\",\n        value: \"\",\n        labelText: \"Total number of workers\",\n        inputPlaceholder: \"Total workers\"\n      },\n    }\n  ]\n}\n\nexport default initialState;\n","import {combineReducers} from 'redux';\nimport vpChips from './vpChips';\nimport buildings from './buildings';\n\nconst rootReducer = combineReducers({\n  vpChips,\n  buildings\n})\n\nexport default rootReducer;\n","import * as types from \"../actions/actionTypes\";\nimport * as directions from \"../actions/changeDirections\";\nimport initialState from \"./initialState\";\n\nexport default function vpChips(state=initialState.vpChips, action) {\n  switch (action.type) {\n    case types.CHANGE_VP_CHIPS:\n      switch (action.direction) {\n        case directions.ADD:\n          return (state + action.amount)\n        case directions.SUBTRACT:\n          const newVpChips = state - action.amount;\n          if (newVpChips > 0) {\n            return newVpChips\n          } else {\n            return 0\n          }\n        default:\n          return state\n      }\n    default:\n      return state\n  }\n}\n","import * as types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function buildings(state=initialState.buildings, action) {\n  switch (action.type) {\n    case types.TOGGLE_BUILDING_BUILT:\n      return state.map((building) => {\n        if (building.name === action.buildingName) {\n          return Object.assign({}, building, {\n            isBuilt: !building.isBuilt\n          })\n        }\n        return building\n      })\n    case types.TOGGLE_BUILDING_HAS_WORKER:\n      return state.map((building) => {\n        if (building.name === action.buildingName) {\n          return Object.assign({}, building, {\n            hasWorker: !building.hasWorker\n          })\n        }\n        return building\n      })\n    case types.SET_BONUS_INPUT:\n      return state.map((building) => {\n        if (building.name === action.buildingName) {\n          return Object.assign({}, building, {\n            bonusInput: Object.assign({}, building.bonusInput, {\n              value: action.inputValue\n            })\n          })\n        }\n        return building\n      })\n    default:\n      return state\n  }\n}\n","import React from 'react';\n\nconst HeaderLayout = () => (\n  <div className=\"text-center bordered-round\">\n      <h4>Puerto Rico Scoresheet</h4>\n      <p className=\"lead text-muted\">\n        Helping you figure out how badly you lost since 2018\n      </p>\n  </div>\n);\n\nexport default HeaderLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ScoreDisplayLayout = ({ titleText, isScoreLarge, scoreValue }) => (\n  <>\n    <p className=\"text-muted\">{titleText}</p>\n    <div>\n      {\n        isScoreLarge ?\n        <h2>{scoreValue}</h2> :\n        <h4>{scoreValue}</h4>\n      }\n    </div>\n  </>\n)\n\nScoreDisplayLayout.propTypes = {\n  titleText: PropTypes.string.isRequired,\n  isScoreLarge: PropTypes.bool,\n  scoreValue: PropTypes.number.isRequired,\n}\n\nexport default ScoreDisplayLayout;\n","import React from 'react';\nimport { Badge } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst ChipChangeButtonLayout = ({ buttonText, idValue, onButtonClick }) => (\n  <Badge onClick={onButtonClick} href=\"#\" id={idValue}>\n    {buttonText}\n  </Badge>\n)\n\nChipChangeButtonLayout.propTypes = {\n  buttonText: PropTypes.string.isRequired,\n  idValue: PropTypes.string.isRequired,\n  onButtonClick: PropTypes.func.isRequired,\n}\n\nexport default ChipChangeButtonLayout;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { changeVpChips } from '../actions/actionCreators';\nimport ChipChangeButtonLayout from './ChipChangeButtonLayout';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    buttonText: ownProps.buttonText,\n    idValue: ownProps.idValue\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onButtonClick: () => {\n      dispatch(changeVpChips(ownProps.direction, ownProps.amount))\n    }\n  }\n}\n\nconst ChipChangeButtonContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChipChangeButtonLayout)\n\nChipChangeButtonContainer.propTypes = {\n  buttonText: PropTypes.string.isRequired,\n  idValue: PropTypes.string.isRequired,\n  direction: PropTypes.string.isRequired,\n  amount: PropTypes.number.isRequired\n}\n\nexport default ChipChangeButtonContainer;\n","import * as types from './actionTypes';\n\nexport function changeVpChips(direction, amount) {\n  return { type: types.CHANGE_VP_CHIPS, direction, amount }\n}\n\nexport function toggleBuildingBuilt(buildingName) {\n  return { type: types.TOGGLE_BUILDING_BUILT, buildingName }\n}\n\nexport function toggleBuildingHasWorker(buildingName) {\n  return { type: types.TOGGLE_BUILDING_HAS_WORKER, buildingName }\n}\n\nexport function setBonusInput(buildingName, inputValue) {\n  return { type: types.SET_BONUS_INPUT, buildingName, inputValue }\n}\n","import React from 'react';\nimport {\n  Col,\n  Container,\n  Row\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport ScoreDisplayLayout from './ScoreDisplayLayout';\nimport ChipChangeButtonContainer from './ChipChangeButtonContainer';\nimport * as directions from \"../actions/changeDirections\";\n\nconst ScoringLayout = ({\n  vpChips,\n  buildingsScore,\n  bonusScore,\n  totalScore\n}) => (\n  <Container>\n    <Row>\n      <Col>\n        <div className=\"text-center bordered-round\">\n          <ScoreDisplayLayout\n            titleText=\"Total Points\"\n            scoreValue={totalScore}\n            isScoreLarge={true}\n          />\n        </div>\n      </Col>\n    </Row>\n    <Row>\n      <Col className=\"px-1\">\n        <div className=\"text-center bordered-round\">\n          <Row>\n            <Col className=\"px-1 text-right\">\n              <ChipChangeButtonContainer\n                buttonText=\"+\"\n                idValue=\"increment\"\n                direction={directions.ADD}\n                amount={1} />\n            </Col>\n            <Col xs=\"auto\" className=\"px-1\">\n              <ScoreDisplayLayout\n                titleText=\"Chips\"\n                scoreValue={vpChips}\n                isScoreLarge={false} />\n            </Col>\n            <Col className=\"px-1 text-left\">\n              <ChipChangeButtonContainer\n                buttonText=\"-\"\n                idValue=\"decrement\"\n                direction={directions.SUBTRACT}\n                amount={1} />\n            </Col>\n          </Row>\n        </div>\n      </Col>\n      <Col className=\"px-1\">\n        <div className=\"text-center bordered-round\">\n          <ScoreDisplayLayout\n            titleText=\"Buildings\"\n            scoreValue={buildingsScore}\n            isScoreLarge={false} />\n        </div>\n      </Col>\n      <Col className=\"px-1\">\n        <div className=\"text-center bordered-round\">\n          <ScoreDisplayLayout\n            titleText=\"Bonuses\"\n            scoreValue={bonusScore}\n            isScoreLarge={false} />\n        </div>\n      </Col>\n    </Row>\n  </Container>\n);\n\nScoringLayout.propTypes = {\n  vpChips: PropTypes.number.isRequired,\n  buildingsScore: PropTypes.number.isRequired,\n  bonusScore: PropTypes.number.isRequired,\n  totalScore: PropTypes.number.isRequired\n}\n\nexport default ScoringLayout;\n\n\n// vpScore: PropTypes.shape({\n//     vpChips: PropTypes.number,\n//     vpBuildings: PropTypes.number,\n//     vpBonuses: PropTypes.number\n//   }).isRequired,\n// totalVpScore: PropTypes.number.isRequired\n","import { connect } from 'react-redux';\nimport { PRODUCTION_LARGE, PRODUCTION_SMALL, VIOLET } from '../reducers/buildingTypes';\nimport ScoringLayout from './ScoringLayout';\n\nconst getBuildingsScore = buildings => {\n  const buildingsScoreReducer = (acc, cur) => {\n    return(cur.isBuilt ? acc + cur.points : acc);\n  }\n  return buildings.reduce(buildingsScoreReducer, 0);\n}\n\nconst getBonusScore = (buildings, vpChips) => {\n  const buildingTypeCounts = {\n    PRODUCTION_LARGE: countByType(buildings, PRODUCTION_LARGE),\n    PRODUCTION_SMALL: countByType(buildings, PRODUCTION_SMALL),\n    VIOLET: countByType(buildings, VIOLET)\n  }\n  const bonusScoreReducer = (acc, cur) => {\n    return (acc + calculateBuildingBonus(cur, buildingTypeCounts, vpChips))\n  }\n  return buildings.reduce(bonusScoreReducer, 0)\n}\n\nconst calculateBuildingBonus = (building, buildingTypeCounts, vpChips) => {\n  const countProductionLarge = buildingTypeCounts.PRODUCTION_LARGE;\n  const countProductionSmall = buildingTypeCounts.PRODUCTION_SMALL;\n  const countViolet = buildingTypeCounts.VIOLET;\n  if (building.hasWorker && building.isBuilt) {\n    switch (building.name) {\n      case \"Guild Hall\":\n        return (\n          countProductionSmall + 2 * countProductionLarge\n        );\n      case \"Residence\":\n        if (building.bonusInput.value < 9) {\n          return 0;\n        } else if (building.bonusInput.value > 12) {\n          return 0;\n        } else {\n          return building.bonusInput.value - 5;\n        }\n      case \"Fortress\":\n        return Math.floor(building.bonusInput.value/3);\n      case \"Customs House\":\n        return Math.floor(vpChips/4);\n      case \"City Hall\":\n        return countViolet;\n      default:\n        return 0\n    }\n  } else {\n    return 0;\n  }\n}\n\nconst countByType = (buildings, type) => {\n  const countTypeReducer = (acc, cur) => {\n    return ((cur.type === type && cur.isBuilt) ? acc + 1 : acc)\n  }\n  return buildings.reduce(countTypeReducer, 0)\n}\n\nconst mapStateToProps = state => {\n  const currBuildingsScore = getBuildingsScore(state.buildings);\n  const currBonusScore = getBonusScore(state.buildings, state.vpChips);\n  const currTotalScore = state.vpChips + currBuildingsScore + currBonusScore;\n  return {\n    vpChips: state.vpChips,\n    buildingsScore: currBuildingsScore,\n    bonusScore: currBonusScore,\n    totalScore: currTotalScore\n  }\n}\n\nconst ScoringContainer = connect(\n  mapStateToProps\n)(ScoringLayout)\n\nexport default ScoringContainer;\n","import React from 'react';\nimport {FormGroup} from 'reactstrap';\nimport PropTypes from \"prop-types\";\n\nconst sanitizeInputValue = (value) => {\n  const parsedValue = parseInt(value, 10);\n  return (isNaN(parsedValue) ? '' : parsedValue);\n}\n\nconst BuildingBonusInputLayout = ({\n  name,\n  inputId,\n  value,\n  labelText,\n  inputPlaceholder,\n  onBonusInputChange\n}) => {\n  return(\n    <FormGroup>\n      <label htmlFor={inputId} className=\"mx-1 sr-only\">\n        {labelText}\n      </label>\n      <input\n        type=\"text\"\n        id={inputId}\n        placeholder={inputPlaceholder}\n        value={value}\n        className=\"form-control-sm\"\n        onChange={\n          (e) => onBonusInputChange(name, sanitizeInputValue(e.target.value))\n        }\n        onClick={(e) => {e.stopPropagation()}}\n      />\n    </FormGroup>\n  )\n};\n\nBuildingBonusInputLayout.propTypes = {\n  name: PropTypes.string.isRequired,\n  inputId: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  labelText: PropTypes.string.isRequired,\n  inputPlaceholder: PropTypes.string.isRequired,\n  onBonusInputChange: PropTypes.func.isRequired\n}\n\nexport default BuildingBonusInputLayout;\n","import React from 'react';\nimport {Input, Form, FormGroup, Label} from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport BuildingBonusInputLayout from \"./BuildingBonusInputLayout\";\n\nconst BuildingBonusPanelLayout = ({\n  name,\n  hasWorker,\n  bonusInput,\n  onWorkerChange,\n  onBonusInputChange\n}) => {\n  let inputFormCode;\n  if (bonusInput !== null) {\n    inputFormCode = (\n      <BuildingBonusInputLayout\n        name={name}\n        inputId={bonusInput.inputId}\n        value={bonusInput.value}\n        labelText={bonusInput.labelText}\n        inputPlaceholder={bonusInput.inputPlaceholder}\n        onBonusInputChange={onBonusInputChange} />\n    );\n  } else {\n    inputFormCode = \"\";\n  }\n  // const handleBonusInputCode = (e) => {props.setBonusContributor(\n  //   parseInt(e.target.value, 10)\n  // )};\n\n  // Both label and checkbox need stopPropagation\n  // or clicks will trigger toggleBuilt\n  return(\n    <div>\n      <hr className=\"my-1\"/>\n      <Form inline className=\"justify-content-center\">\n        <FormGroup check>\n          <Label className=\"mx-1\" check onClick={e => e.stopPropagation()}>\n            <Input\n              type=\"checkbox\"\n              checked={hasWorker}\n              onClick={e => e.stopPropagation()}\n              onChange={() => onWorkerChange(name)}\n            /> 👷🏾 ?\n          </Label>\n        </FormGroup>\n        {inputFormCode}\n      </Form>\n    </div>\n  )\n};\n\nBuildingBonusPanelLayout.propTypes = {\n  name: PropTypes.string.isRequired,\n  hasWorker: PropTypes.bool.isRequired,\n  bonusInput: PropTypes.object,\n  onWorkerChange: PropTypes.func.isRequired,\n  onBonusInputChange: PropTypes.func\n}\n\nexport default BuildingBonusPanelLayout;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport BuildingBonusPanelLayout from \"./BuildingBonusPanelLayout\";\n\nconst BuildingLayout = ({\n  name,\n  isBuilt,\n  hasWorker,\n  bonusInput,\n  onClick,\n  onWorkerChange,\n  onBonusInputChange\n}) => {\n  const builtStatusStyle = (isBuilt ? \"bg-success\" : \"bg-light\");\n  let bonusPanelCode;\n  if (hasWorker !== null) {\n    bonusPanelCode=(\n      <BuildingBonusPanelLayout\n        name={name}\n        hasWorker={hasWorker}\n        bonusInput={bonusInput}\n        onWorkerChange={onWorkerChange}\n        onBonusInputChange={onBonusInputChange} />\n    );\n  } else {\n    bonusPanelCode=\"\";\n  }\n\n  return(\n    <div\n      className={`${builtStatusStyle} text-center bordered-round`}\n      onClick={onClick}\n      id={name}\n    >\n      {name}\n      {bonusPanelCode}\n    </div>\n  )\n};\n\nBuildingLayout.propTypes = {\n  name: PropTypes.string.isRequired,\n  isBuilt: PropTypes.bool.isRequired,\n  hasWorker: PropTypes.bool,\n  bonusInput: PropTypes.object,\n  onClick: PropTypes.func.isRequired,\n  onWorkerChange: PropTypes.func,\n  onBonusInputChange: PropTypes.func\n}\n\nexport default BuildingLayout;\n","import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  Col\n} from 'reactstrap';\nimport PropTypes from \"prop-types\";\nimport BuildingLayout from \"./BuildingLayout\";\n\nconst BuildingColumnLayout = ({\n  buildingLevel,\n  buildings,\n  onBuildingClick,\n  onWorkerChange,\n  onBonusInputChange\n}) => (\n  <Col>\n    <Card className=\"text-center\">\n      <CardHeader>\n        {buildingLevel}\n      </CardHeader>\n    </Card>\n    {buildings.map(\n      (building) => {\n        return(\n          <BuildingLayout\n            key={building.name}\n            {...building}\n            onClick={() => onBuildingClick(building.name)}\n            onWorkerChange={onWorkerChange}\n            onBonusInputChange={onBonusInputChange} />\n        )\n      }\n    )}\n  </Col>\n);\n\nBuildingColumnLayout.propTypes = {\n  buildingLevel: PropTypes.number.isRequired,\n  buildings: PropTypes.array.isRequired,\n  onBuildingClick: PropTypes.func.isRequired,\n  onWorkerChange: PropTypes.func,\n  onBonusInputChange: PropTypes.func,\n};\n\nexport default BuildingColumnLayout;\n","import { connect } from 'react-redux';\nimport {\n  toggleBuildingBuilt,\n  toggleBuildingHasWorker,\n  setBonusInput\n} from '../actions/actionCreators';\nimport BuildingColumnLayout from './BuildingColumnLayout';\n\nconst getMatchingBuildings = (buildings, columnNumber) => {\n  return buildings.filter(b => (b.points === columnNumber))\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    buildingLevel: ownProps.columnNumber,\n    buildings: getMatchingBuildings(state.buildings, ownProps.columnNumber)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onBuildingClick: buildingName => {\n      dispatch(toggleBuildingBuilt(buildingName))\n    },\n    onWorkerChange: buildingName => {\n      dispatch(toggleBuildingHasWorker(buildingName))\n    },\n    onBonusInputChange: (buildingName, inputValue) => {\n      dispatch(setBonusInput(buildingName, inputValue))\n    }\n  }\n}\n\nconst BuildingColumnContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BuildingColumnLayout)\n\nexport default BuildingColumnContainer;\n","import React from 'react';\nimport {\n  Container,\n  Row\n} from 'reactstrap';\nimport BuildingColumnContainer from \"./BuildingColumnContainer\";\n\nconst BuildingSelector = () => (\n  <Container>\n    <Row>\n      {[1, 2, 3, 4].map(\n        (column) => {\n          return(\n            <BuildingColumnContainer\n              key={column}\n              columnNumber={column} />\n          )\n        }\n      )}\n    </Row>\n  </Container>\n);\n\nexport default BuildingSelector;\n","import React from 'react';\nimport {Container, Row, Col} from 'reactstrap';\nimport HeaderLayout from './components/HeaderLayout';\nimport ScoringContainer from './components/ScoringContainer';\nimport BuildingGridLayout from './components/BuildingGridLayout';\n// TODO: Clean up unused dependencies in package.JSON\n\nconst App = () => (\n  <div className=\"scoresheet\">\n    <Container fluid={true}>\n      <Row>\n        <Col>\n          <HeaderLayout />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ScoringContainer />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <BuildingGridLayout />\n        </Col>\n      </Row>\n    </Container>\n  </div>\n)\n\nexport default App;\n\n// <Row>\n//   <Col>\n//     <BuildingSelector\n//       buildingsData={this.state.buildingColumns}\n//       toggleBuiltOf={this.toggleBuiltOf}\n//       toggleActiveOf={this.toggleActiveOf}\n//       setBonusContributorOf={this.setBonusContributorOf}\n//     />\n//   </Col>\n// </Row>\n\n\n\n  // // General helper functions\n  // isNumber = (valueToCheck) => {\n  //   // Unary + in parseFloat speeds up some edge case checks\n  //   // See https://stackoverflow.com/questions/6449611/how-to-check-whether-a-value-is-a-number-in-javascript-or-jquery\n  //   return !isNaN(parseFloat(+valueToCheck)) && isFinite(valueToCheck)\n  // }\n  //\n  // flattenBuildingColumnsInState = () => {\n  //   return this.state.buildingColumns.reduce(\n  //     (acc, cur) => acc.concat(cur.buildings),\n  //     []\n  //   );\n  // }\n  //\n  //\n  // // Handler helper functions\n  // changePropertyOf = (buildingToChange, otherArgs, callback) => {\n  //   this.setState({\n  //     buildingColumns: this.state.buildingColumns.map((column) => {\n  //       return({\n  //         ...column,\n  //         buildings: column.buildings.map((building) => {\n  //           if (building.buildingName === buildingToChange) {\n  //             // changeProperty(building, args)\n  //             // changeProperty is passed in as a callback\n  //             // changeProperty will edit the building state object\n  //             // then will return it back\n  //             // This lets the \"building scanner\" code run generically\n  //             // args is an object holding all other arguments\n  //             return (callback(building, otherArgs));\n  //           } // end if\n  //           return building;\n  //         }) // end .map\n  //       }); // end return\n  //     }) // end .map\n  //   }); // end setState\n  // }\n  //\n  // callbackForToggleBoolPropertyOf = (building, otherArgs) => {\n  //   if (\"property\" in otherArgs) {\n  //     return({\n  //         ...building,\n  //         [otherArgs.property]: !building[otherArgs.property]\n  //       });\n  //   } else {\n  //     console.log('otherArgs did not contain key \"property\"');\n  //   }\n  // }\n  //\n  // callbackForSetBonusContributorOf = (building, otherArgs) => {\n  //   if (\"contrib\" in otherArgs) {\n  //     if (this.isNumber(otherArgs.contrib)) {\n  //       return({\n  //           ...building,\n  //           bonusContributor: otherArgs.contrib\n  //       });\n  //     } else {\n  //       return({\n  //           ...building,\n  //           bonusContributor: \"\"\n  //       });\n  //     }\n  //   } else {\n  //     console.log('otherArgs did not contain key \"contrib\"');\n  //   }\n  // }\n  //\n  // toggleBoolPropertyOf = (property, buildingToChange) => {\n  //   const otherArgs = {property: property};\n  //   this.changePropertyOf(\n  //     buildingToChange,\n  //     otherArgs,\n  //     this.callbackForToggleBoolPropertyOf\n  //   );\n  // }\n  //\n  //\n  // // State calculation helper functions\n  // countBuiltBuildings = (buildingType) => {\n  //   let returnValue = 0;\n  //   const flattenedBuildingArray = this.flattenBuildingColumnsInState();\n  //   returnValue = flattenedBuildingArray.reduce(\n  //     (acc, cur) => {\n  //       if (cur.buildingType === buildingType && cur.isBuilt) {\n  //         return acc + 1;\n  //       } else {\n  //         return acc;\n  //       }\n  //     }, 0\n  //   );\n  //   return returnValue;\n  // }\n  //\n  // getVpBonusFor = (building) => {\n  //   let buildingBonusPoints = 0;\n  //   if (building.isActive && building.isBuilt) {\n  //     switch (building.buildingName) {\n  //       case \"Guild Hall\":\n  //         buildingBonusPoints = (\n  //           building.otherArgs.productionLgCount * 2 +\n  //           building.otherArgs.productionSmCount\n  //         );\n  //         break;\n  //       case \"Customs House\":\n  //         buildingBonusPoints = Math.floor(building.otherArgs.vpChips / 4);\n  //         // buildingBonusPoints = 2;\n  //         break;\n  //       case \"Residence\":\n  //         buildingBonusPoints = (\n  //           building.bonusContributor <= 4 ?\n  //           4 :\n  //           (building.bonusContributor - 5)\n  //         );\n  //         break;\n  //       case \"City Hall\":\n  //         buildingBonusPoints = building.otherArgs.productionVioletCount;\n  //         break;\n  //       case \"Fortress\":\n  //         buildingBonusPoints = Math.floor(building.bonusContributor / 3);\n  //         break;\n  //       default:\n  //         break;\n  //     }\n  //   }\n  //   return buildingBonusPoints;\n  // }\n  //\n  // getVpBonuses = () => {\n  //   const vpBuildings = this.state.buildingColumns[3].buildings;\n  //   const otherArgs = {\n  //     vpChips: this.state.vpChips,\n  //     productionLgCount: this.countBuiltBuildings(\"production-large\"),\n  //     productionSmCount: this.countBuiltBuildings(\"production-small\"),\n  //     productionVioletCount: this.countBuiltBuildings(\"violet\")\n  //   }\n  //   const adjustedBuildingArray = vpBuildings.map(\n  //     (building) => {\n  //       return ({\n  //         ...building,\n  //         otherArgs\n  //       });\n  //     }\n  //   );\n  //   const buildingVpBonusArray = adjustedBuildingArray.map(this.getVpBonusFor);\n  //   return buildingVpBonusArray.reduce((acc, cur) => acc + cur);\n  // };\n  //\n  // getVpBuildings = () => {\n  //   let returnValue = 0;\n  //   const flattenedBuildingArray = this.flattenBuildingColumnsInState();\n  //   returnValue = flattenedBuildingArray.reduce(\n  //     (acc, cur) => {\n  //       if (cur.isBuilt) {\n  //         return acc + cur.buildingPoints;\n  //       } else {\n  //         return acc;\n  //       }\n  //     }, 0\n  //   );\n  //   return returnValue;\n  // };\n  //\n  //\n  // // Handler functions\n  // changeVpChipCount = (changeType) => {\n  //   let changeValue;\n  //   if (changeType === \"increment\") {\n  //     changeValue = 1;\n  //   } else if (changeType === \"decrement\" && this.state.vpChips > 0) {\n  //     changeValue = -1;\n  //   } else {\n  //     changeValue = 0;\n  //   }\n  //   this.setState({\n  //     vpChips: (this.state.vpChips + changeValue)\n  //   });\n  // }\n  //\n  // toggleBuiltOf = (buildingToChange) => {\n  //   this.toggleBoolPropertyOf(\"isBuilt\", buildingToChange);\n  // }\n  //\n  // toggleActiveOf = (buildingToChange) => {\n  //   this.toggleBoolPropertyOf(\"isActive\", buildingToChange);\n  // }\n  //\n  // setBonusContributorOf = (contrib, buildingToChange) => {\n  //   const otherArgs = {contrib: contrib};\n  //   this.changePropertyOf(\n  //     buildingToChange,\n  //     otherArgs,\n  //     this.callbackForSetBonusContributorOf);\n  // }\n  //\n  //\n  // // State calculation functions\n  // getTotalVpScore = () => {\n  //   return this.state.vpChips +\n  //     this.getVpBuildings() +\n  //     this.getVpBonuses();\n  // };\n  //\n  // getVpScoreObject = () => {return {\n  //   vpChips: this.state.vpChips,\n  //   vpBuildings: this.getVpBuildings(),\n  //   vpBonuses: this.getVpBonuses()\n  // };}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport configureStore from './store/configureStore';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers/rootReducer';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n}\n"],"sourceRoot":""}